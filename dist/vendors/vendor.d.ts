import { Observable } from "rxjs";
import { Empty, GetRequest, IdRequest, Response } from "../common/common";
import { HealthCheckRequest, HealthCheckResponse } from "../healthcheck/healthcheck";
import { Address, ChangePasswordRequest, CheckUserRequest, LoginRequest, ResetPasswordRequest, SendTokenRequest, UpdateSettingsRequest, VerifyRequest } from "../users/user";
export declare const protobufPackage = "vendors";
export interface SaveVendorRequest {
    id?: string | undefined;
    phone: string;
    email: string;
    password: string;
    address: Address | undefined;
    categoryId: string;
    businessName: string;
    firstname?: string | undefined;
    othername?: string | undefined;
    lastname?: string | undefined;
    individualFullName?: string | undefined;
    individualAddress: string;
    individualSelfie: string;
    individualIdentityCard: string;
    businessPhoneNumber: string;
    businessEmail?: string | undefined;
    licenseNumber: string;
    openingHours: string;
    closingHours: string;
    businessStreet: string;
    businessHouseNumber: string;
    businessNearestBusStop: string;
    businessLogo: string;
    businessThumbnail: string;
    businessCertificate: string;
    businessMemorandum: string;
    businessUtilityBill: string;
    businessBuilding: string;
    deviceType: string;
    deviceToken: string;
    deviceVersion: string;
}
export interface SaveFranchiseRequest {
    sellerId: string;
    email: string;
    password: string;
    latitude?: string | undefined;
    longitude?: string | undefined;
    formattedAddress?: string | undefined;
    franchiseName: string;
    franchisePhoneNumber: string;
    openingHours: string;
    closingHours: string;
    individualFirstName?: string | undefined;
    individualOtherName?: string | undefined;
    individualLastName?: string | undefined;
    banner: string;
    sellerAllowWithdraw?: boolean | undefined;
}
export declare const VENDORS_PACKAGE_NAME = "vendors";
export interface VendorServiceClient {
    healthCheck(request: HealthCheckRequest): Observable<HealthCheckResponse>;
    createVendor(request: SaveVendorRequest): Observable<Response>;
    login(request: LoginRequest): Observable<Response>;
    checkVendorExists(request: CheckUserRequest): Observable<Response>;
    verifyVendor(request: VerifyRequest): Observable<Response>;
    sendTokenVerification(request: SendTokenRequest): Observable<Response>;
    getVendor(request: GetRequest): Observable<Response>;
    getVendors(request: GetRequest): Observable<Response>;
    getVendorAddress(request: GetRequest): Observable<Response>;
    changePassword(request: ChangePasswordRequest): Observable<Response>;
    resetPasswordVerification(request: ResetPasswordRequest): Observable<Response>;
    delete(request: IdRequest): Observable<Response>;
    approve(request: IdRequest): Observable<Response>;
    reject(request: IdRequest): Observable<Response>;
    activate(request: IdRequest): Observable<Response>;
    deactivate(request: IdRequest): Observable<Response>;
    updateSettings(request: UpdateSettingsRequest): Observable<Response>;
    saveFranchise(request: SaveFranchiseRequest): Observable<Response>;
    savePersonnel(request: Empty): Observable<Response>;
}
export interface VendorServiceController {
    healthCheck(request: HealthCheckRequest): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
    createVendor(request: SaveVendorRequest): Promise<Response> | Observable<Response> | Response;
    login(request: LoginRequest): Promise<Response> | Observable<Response> | Response;
    checkVendorExists(request: CheckUserRequest): Promise<Response> | Observable<Response> | Response;
    verifyVendor(request: VerifyRequest): Promise<Response> | Observable<Response> | Response;
    sendTokenVerification(request: SendTokenRequest): Promise<Response> | Observable<Response> | Response;
    getVendor(request: GetRequest): Promise<Response> | Observable<Response> | Response;
    getVendors(request: GetRequest): Promise<Response> | Observable<Response> | Response;
    getVendorAddress(request: GetRequest): Promise<Response> | Observable<Response> | Response;
    changePassword(request: ChangePasswordRequest): Promise<Response> | Observable<Response> | Response;
    resetPasswordVerification(request: ResetPasswordRequest): Promise<Response> | Observable<Response> | Response;
    delete(request: IdRequest): Promise<Response> | Observable<Response> | Response;
    approve(request: IdRequest): Promise<Response> | Observable<Response> | Response;
    reject(request: IdRequest): Promise<Response> | Observable<Response> | Response;
    activate(request: IdRequest): Promise<Response> | Observable<Response> | Response;
    deactivate(request: IdRequest): Promise<Response> | Observable<Response> | Response;
    updateSettings(request: UpdateSettingsRequest): Promise<Response> | Observable<Response> | Response;
    saveFranchise(request: SaveFranchiseRequest): Promise<Response> | Observable<Response> | Response;
    savePersonnel(request: Empty): Promise<Response> | Observable<Response> | Response;
}
export declare function VendorServiceControllerMethods(): (constructor: Function) => void;
export declare const VENDOR_SERVICE_NAME = "VendorService";
