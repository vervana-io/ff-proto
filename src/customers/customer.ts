// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: customers/customer.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetRequest, IdRequest, Response } from "../common/common";
import { HealthCheckRequest, HealthCheckResponse } from "../healthcheck/healthcheck";
import {
  Address,
  ChangePasswordRequest,
  Device,
  LoginRequest,
  OTPType,
  ResetPasswordRequest,
  UpdateSettingsRequest,
  VerifyRequest,
} from "../users/user";

export const protobufPackage = "customers";

/** Requests */
export interface SaveCustomerRequest {
  id?: string | undefined;
  email: string;
  password: string;
  phone: string;
  firstname: string;
  lastname: string;
  address: Address | undefined;
  deviceToken: string;
  deviceVersion: string;
  referral: string;
}

export interface CheckCustomerRequest {
  /** email, phone */
  with: string;
  customer: string;
}

export interface SendTokenRequest {
  id?:
    | string
    | undefined;
  /** 'email' or 'phone' */
  with: string;
  /** email address or phone number */
  customer: string;
  type: OTPType;
}

export interface VerifyCustomerRequest {
  /** 'email' or 'phone' */
  with: string;
  /** email address or phone number */
  customer: string;
  token: string;
}

export interface CustomerResponse {
  status: number;
  success: boolean;
  message: string;
  error?: string | undefined;
  data: CustomerResponse_Data | undefined;
}

export interface CustomerResponse_Data {
  Customer:
    | Customer
    | undefined;
  /** Wallet wallet = 3; */
  settings: { [key: string]: string };
  address: Address | undefined;
}

export interface CustomerResponse_Data_SettingsEntry {
  key: string;
  value: string;
}

export interface Customer {
  id: string;
  firstname: string;
  lastname: string;
  phones: { [key: string]: string };
  referralCode: string;
  avatar: string;
  devices: Device[];
}

export interface Customer_PhonesEntry {
  key: string;
  value: string;
}

/** User Requests */
export interface CustomerOAuthProviderRequest {
  provider: string;
  token: string;
  deviceToken: string;
  medium: string;
  latitude: number;
  longitude: number;
  address: { [key: string]: string };
}

export interface CustomerOAuthProviderRequest_AddressEntry {
  key: string;
  value: string;
}

export const CUSTOMERS_PACKAGE_NAME = "customers";

export interface CustomerServiceClient {
  healthCheck(request: HealthCheckRequest): Observable<HealthCheckResponse>;

  createCustomer(request: SaveCustomerRequest): Observable<Response>;

  login(request: LoginRequest): Observable<CustomerResponse>;

  checkCustomerExists(request: CheckCustomerRequest): Observable<Response>;

  verifyCustomer(request: VerifyRequest): Observable<Response>;

  sendTokenVerification(request: SendTokenRequest): Observable<Response>;

  getCustomer(request: GetRequest): Observable<CustomerResponse>;

  getCustomers(request: GetRequest): Observable<CustomerResponse>;

  customerOAuthProvider(request: CustomerOAuthProviderRequest): Observable<CustomerResponse>;

  getCustomerAddress(request: GetRequest): Observable<CustomerResponse>;

  /** rpc UpdateSettings(UpdateSettingsRequest) returns (Response); */

  changePassword(request: ChangePasswordRequest): Observable<Response>;

  resetPasswordVerification(request: ResetPasswordRequest): Observable<Response>;

  delete(request: IdRequest): Observable<Response>;

  approve(request: IdRequest): Observable<Response>;

  reject(request: IdRequest): Observable<Response>;

  activate(request: IdRequest): Observable<Response>;

  deactivate(request: IdRequest): Observable<Response>;

  updateSettings(request: UpdateSettingsRequest): Observable<Response>;
}

export interface CustomerServiceController {
  healthCheck(
    request: HealthCheckRequest,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;

  createCustomer(request: SaveCustomerRequest): Promise<Response> | Observable<Response> | Response;

  login(request: LoginRequest): Promise<CustomerResponse> | Observable<CustomerResponse> | CustomerResponse;

  checkCustomerExists(request: CheckCustomerRequest): Promise<Response> | Observable<Response> | Response;

  verifyCustomer(request: VerifyRequest): Promise<Response> | Observable<Response> | Response;

  sendTokenVerification(request: SendTokenRequest): Promise<Response> | Observable<Response> | Response;

  getCustomer(request: GetRequest): Promise<CustomerResponse> | Observable<CustomerResponse> | CustomerResponse;

  getCustomers(request: GetRequest): Promise<CustomerResponse> | Observable<CustomerResponse> | CustomerResponse;

  customerOAuthProvider(
    request: CustomerOAuthProviderRequest,
  ): Promise<CustomerResponse> | Observable<CustomerResponse> | CustomerResponse;

  getCustomerAddress(request: GetRequest): Promise<CustomerResponse> | Observable<CustomerResponse> | CustomerResponse;

  /** rpc UpdateSettings(UpdateSettingsRequest) returns (Response); */

  changePassword(request: ChangePasswordRequest): Promise<Response> | Observable<Response> | Response;

  resetPasswordVerification(request: ResetPasswordRequest): Promise<Response> | Observable<Response> | Response;

  delete(request: IdRequest): Promise<Response> | Observable<Response> | Response;

  approve(request: IdRequest): Promise<Response> | Observable<Response> | Response;

  reject(request: IdRequest): Promise<Response> | Observable<Response> | Response;

  activate(request: IdRequest): Promise<Response> | Observable<Response> | Response;

  deactivate(request: IdRequest): Promise<Response> | Observable<Response> | Response;

  updateSettings(request: UpdateSettingsRequest): Promise<Response> | Observable<Response> | Response;
}

export function CustomerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "healthCheck",
      "createCustomer",
      "login",
      "checkCustomerExists",
      "verifyCustomer",
      "sendTokenVerification",
      "getCustomer",
      "getCustomers",
      "customerOAuthProvider",
      "getCustomerAddress",
      "changePassword",
      "resetPasswordVerification",
      "delete",
      "approve",
      "reject",
      "activate",
      "deactivate",
      "updateSettings",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CustomerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CustomerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CUSTOMER_SERVICE_NAME = "CustomerService";
