// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: notifications/notification.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notifications";

export enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0,
  NOTIFICATION_TYPE_SMS = 1,
  NOTIFICATION_TYPE_EMAIL = 2,
  NOTIFICATION_TYPE_PUSH = 3,
  NOTIFICATION_TYPE_SOCKET = 4,
  UNRECOGNIZED = -1,
}

export interface Empty {
}

export interface Response {
  status: number;
  success: boolean;
  message: string;
  data: { [key: string]: string };
  error?: string | undefined;
}

export interface Response_DataEntry {
  key: string;
  value: string;
}

export interface SendMessageRequest {
  type: NotificationType;
  to: string;
  data: { [key: string]: string };
}

export interface SendMessageRequest_DataEntry {
  key: string;
  value: string;
}

export const NOTIFICATIONS_PACKAGE_NAME = "notifications";

export interface NotificationServiceClient {
  health(request: Empty): Observable<Response>;

  sendMessage(request: SendMessageRequest): Observable<Response>;
}

export interface NotificationServiceController {
  health(request: Empty): Promise<Response> | Observable<Response> | Response;

  sendMessage(request: SendMessageRequest): Promise<Response> | Observable<Response> | Response;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "sendMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
