// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: locations/location.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetRequest, Response } from "../common/common";

export const protobufPackage = "locations";

export interface Owner {
  id: string;
  type: string;
}

export interface Address {
  owner?: Owner | undefined;
  location: Location | undefined;
  street?: string | undefined;
  nearestBusStop?: string | undefined;
  id: string;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  metadata: { [key: string]: string };
}

export interface Address_MetadataEntry {
  key: string;
  value: string;
}

export interface UpdateRiderLocationRequest {
  riderId: string;
  lat: number;
  long: number;
}

export interface GetAvailableRidersRequest {
  lat: number;
  long: number;
  excludes: string[];
}

export interface Location {
  latitude?: number | undefined;
  longitude?: number | undefined;
  formatedAddress?: string | undefined;
  coordinates: number[];
}

export interface SaveAddressRequest {
  location: Location | undefined;
  houseNumber: string;
  street: string;
  nearestBusStop: string;
  city: string;
  state: string;
  country: string;
  customerAddress?: SaveCustomerAddressRequest | undefined;
  vendorAddress?: SaveVendorAddressRequest | undefined;
  riderAddress?: SaveRiderAddressRequest | undefined;
}

export interface SaveCustomerAddressRequest {
  customerId: string;
  label?: string | undefined;
  isPrimary: boolean;
}

export interface SaveRiderAddressRequest {
  riderId: string;
}

export interface SaveVendorAddressRequest {
  vendorId: string;
  label?: string | undefined;
  contactPhone?: string | undefined;
  contactEmail?: string | undefined;
  deliveryRadius?: number | undefined;
  averagePrepTime?: number | undefined;
  metadata: { [key: string]: string };
}

export interface SaveVendorAddressRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface GetUserAddressRequest {
  user: string;
  userType: string;
}

export interface VendorLocation {
  vendorId: string;
  location?: Location | undefined;
  addressLabel: string;
  address?: Address | undefined;
  gridId?: string | undefined;
  id: string;
}

export interface GetVendorLocationResponse {
  status: number;
  message: string;
  error?: string | undefined;
  vendors: VendorLocation[];
  vendor?: VendorLocation | undefined;
}

export interface CustomerLocation {
  customerId: string;
  location?: Location | undefined;
  address?: Address | undefined;
  isPrimary: boolean;
  addressLabel?: string | undefined;
  gridId?: string | undefined;
  id: string;
}

export interface GetCustomerLocationResponse {
  status: number;
  message: string;
  error?: string | undefined;
  customers: CustomerLocation[];
  customer?: CustomerLocation | undefined;
}

export interface RiderLocation {
  riderId: string;
  location?: Location | undefined;
  available: boolean;
  gridId?: string | undefined;
  formatedAddress?: string | undefined;
  id: string;
}

export interface GetRiderLocationResponse {
  status: number;
  message: string;
  error?: string | undefined;
  riders: RiderLocation[];
  rider?: RiderLocation | undefined;
}

export const LOCATIONS_PACKAGE_NAME = "locations";

export interface LocationServiceClient {
  saveAddress(request: SaveAddressRequest): Observable<Response>;

  updateRiderLocation(request: UpdateRiderLocationRequest): Observable<Response>;

  getAvailableRiders(request: GetAvailableRidersRequest): Observable<GetRiderLocationResponse>;

  getCustomerAddress(request: GetRequest): Observable<GetCustomerLocationResponse>;

  getVendorsByLocation(request: Location): Observable<GetVendorLocationResponse>;
}

export interface LocationServiceController {
  saveAddress(request: SaveAddressRequest): Promise<Response> | Observable<Response> | Response;

  updateRiderLocation(request: UpdateRiderLocationRequest): Promise<Response> | Observable<Response> | Response;

  getAvailableRiders(
    request: GetAvailableRidersRequest,
  ): Promise<GetRiderLocationResponse> | Observable<GetRiderLocationResponse> | GetRiderLocationResponse;

  getCustomerAddress(
    request: GetRequest,
  ): Promise<GetCustomerLocationResponse> | Observable<GetCustomerLocationResponse> | GetCustomerLocationResponse;

  getVendorsByLocation(
    request: Location,
  ): Promise<GetVendorLocationResponse> | Observable<GetVendorLocationResponse> | GetVendorLocationResponse;
}

export function LocationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "saveAddress",
      "updateRiderLocation",
      "getAvailableRiders",
      "getCustomerAddress",
      "getVendorsByLocation",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOCATION_SERVICE_NAME = "LocationService";
